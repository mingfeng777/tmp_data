# Parameters: <subdir>
define subdir
  $(call warn,$(1),d,D $(1))
  $(foreach bd,$($(1)/builddirs),
    $(call warn,$(1),d,BD $(1)/$(bd))
    $(foreach target,$(SUBTARGETS) $($(1)/subtargets),
      $(foreach btype,$(buildtypes-$(bd)),
        $(call warn_eval,$(1)/$(bd),t,T,$(1)/$(bd)/$(btype)/$(target): $(if $(NO_DEPS)$(QUILT),,$($(1)/$(bd)/$(btype)/$(target)) $(call $(1)//$(btype)/$(target),$(1)/$(bd)/$(btype))))
                  $(call log_make,$(1)/$(bd),$(target),$(btype),$(filter-out __default,$(variant))) \
                        || $(call ERROR,$(2),   ERROR: $(1)/$(bd) [$(btype)] failed to build.,$(findstring $(bd),$($(1)/builddirs-ignore-$(btype)-$(target))))
        $(if $(call diralias,$(bd)),$(call warn_eval,$(1)/$(bd),l,T,$(1)/$(call diralias,$(bd))/$(btype)/$(target): $(1)/$(bd)/$(btype)/$(target)))
      )
      $(call warn_eval,$(1)/$(bd),t,T,$(1)/$(bd)/$(target): $(if $(NO_DEPS)$(QUILT),,$($(1)/$(bd)/$(target)) $(call $(1)//$(target),$(1)/$(bd))))
        $(foreach variant,$(if $(BUILD_VARIANT),$(BUILD_VARIANT),$(if $(strip $($(1)/$(bd)/variants)),$($(1)/$(bd)/variants),$(if $($(1)/$(bd)/default-variant),$($(1)/$(bd)/default-variant),__default))),
                        $(if $(BUILD_LOG),@mkdir -p $(BUILD_LOG_DIR)/$(1)/$(bd)/$(filter-out __default,$(variant)))
                        $(if $($(1)/autoremove),$(call rebuild_check,$(1)/$(bd),$(target),,$(filter-out __default,$(variant))))
                        $(call log_make,$(1)/$(bd),$(target),,$(filter-out __default,$(variant))) \
                                || $(call ERROR,$(1),   ERROR: $(1)/$(bd) failed to build$(if $(filter-out __default,$(variant)), (build variant: $(variant))).,$(findstring $(bd),$($(1)/builddirs-ignore-$(target))))
        )
      $(if $(PREREQ_ONLY)$(DUMP_TARGET_DB),,
        # aliases
        $(if $(call diralias,$(bd)),$(call warn_eval,$(1)/$(bd),l,T,$(1)/$(call diralias,$(bd))/$(target): $(1)/$(bd)/$(target)))
          )
        )
  )
  $(foreach target,$(SUBTARGETS) $($(1)/subtargets),$(call subtarget,$(1),$(target)))
endef


# Parameters: <subdir> <name> <target> <depends> <config options> <stampfile location>
define stampfile
  $(1)/stamp-$(3):=$(if $(6),$(6),$(STAGING_DIR))/stamp/.$(2)_$(3)$(5)
  $$($(1)/stamp-$(3)): $(TMP_DIR)/.build $(4)
        @+$(SCRIPT_DIR)/timestamp.pl -n $$($(1)/stamp-$(3)) $(1) $(4) || \
                $(MAKE) $(if $(QUIET),--no-print-directory) $$($(1)/flags-$(3)) $(1)/$(3)
        @mkdir -p $$$$(dirname $$($(1)/stamp-$(3)))
        @touch $$($(1)/stamp-$(3))

  $$(if $(call debug,$(1),v),,.SILENT: $$($(1)/stamp-$(3)))

  .PRECIOUS: $$($(1)/stamp-$(3)) # work around a make bug

  $(1)//clean:=$(1)/stamp-$(3)/clean
  $(1)/stamp-$(3)/clean: FORCE
        @rm -f $$($(1)/stamp-$(3))

endef

--------------------------------------------------
在target/Makefile內
curdir:=target

$(eval $(call stampfile,$(curdir),target,prereq,.config))
$(eval $(call stampfile,$(curdir),target,compile,$(TMP_DIR)/.build))
$(eval $(call stampfile,$(curdir),target,install,$(TMP_DIR)/.build))

$(eval $(call subdir,$(curdir)))
將eval換成info拆解看運行什麼

拆解一: $(info $(call stampfile,$(curdir),target,prereq,.config))後
  target/stamp-prereq:=/home/minfeng/openwrt/staging_dir/target-aarch64_cortex-a72_musl/stamp/.target_prereq
  $(target/stamp-prereq): /home/minfeng/openwrt/tmp/.build .config
        @+/home/minfeng/openwrt/scripts/timestamp.pl -n $(target/stamp-prereq) target .config || make --no-print-directory $(target/flags-prereq) target/prereq
        @mkdir -p $$(dirname $(target/stamp-prereq))
        @touch $(target/stamp-prereq)

  $(if ,,.SILENT: $(target/stamp-prereq))

  .PRECIOUS: $(target/stamp-prereq) # work around a make bug

  target//clean:=target/stamp-prereq/clean
  target/stamp-prereq/clean: FORCE
        @rm -f $(target/stamp-prereq)

拆解二: $(info $(call stampfile,$(curdir),target,compile,$(TMP_DIR)/.build))後
  target/stamp-compile:=/home/minfeng/openwrt/staging_dir/target-aarch64_cortex-a72_musl/stamp/.target_compile
  $(target/stamp-compile): /home/minfeng/openwrt/tmp/.build /home/minfeng/openwrt/tmp/.build
        @+/home/minfeng/openwrt/scripts/timestamp.pl -n $(target/stamp-compile) target /home/minfeng/openwrt/tmp/.build || make --no-print-directory $(target/flags-compile) target/compile
        @mkdir -p $$(dirname $(target/stamp-compile))
        @touch $(target/stamp-compile)

  $(if ,,.SILENT: $(target/stamp-compile))

  .PRECIOUS: $(target/stamp-compile) # work around a make bug

  target//clean:=target/stamp-compile/clean
  target/stamp-compile/clean: FORCE
        @rm -f $(target/stamp-compile)

拆解三: $(info $(call stampfile,$(curdir),target,install,$(TMP_DIR)/.build))後
  target/stamp-install:=/home/minfeng/openwrt/staging_dir/target-aarch64_cortex-a72_musl/stamp/.target_install
  $(target/stamp-install): /home/minfeng/openwrt/tmp/.build /home/minfeng/openwrt/tmp/.build
        @+/home/minfeng/openwrt/scripts/timestamp.pl -n $(target/stamp-install) target /home/minfeng/openwrt/tmp/.build || make --no-print-directory $(target/flags-install) target/install
        @mkdir -p $$(dirname $(target/stamp-install))
        @touch $(target/stamp-install)

  $(if ,,.SILENT: $(target/stamp-install))

  .PRECIOUS: $(target/stamp-install) # work around a make bug

  target//clean:=target/stamp-install/clean
  target/stamp-install/clean: FORCE
        @rm -f $(target/stamp-install)

拆解四: $(info $(call subdir,$(curdir)))後
      target/linux/prereq:
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/linux/prereq" $(SUBMAKE) -r -C target/linux BUILD_SUBDIR="target/linux" BUILD_VARIANT="" prereq  ||     (    printf "%s\n" "    ERROR: target/linux failed to build.";   exit 1;)

      target/linux/install:
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/linux/install" $(SUBMAKE) -r -C target/linux BUILD_SUBDIR="target/linux" BUILD_VARIANT="" install  ||   (    printf "%s\n" "    ERROR: target/linux failed to build.";   exit 1;)

      target/sdk/prereq:
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/sdk/prereq" $(SUBMAKE) -r -C target/sdk BUILD_SUBDIR="target/sdk" BUILD_VARIANT="" prereq  ||   (    printf "%s\n" "    ERROR: target/sdk failed to build.";   exit 1;)

      target/sdk/install: target/linux/install
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/sdk/install" $(SUBMAKE) -r -C target/sdk BUILD_SUBDIR="target/sdk" BUILD_VARIANT="" install  ||         (    printf "%s\n" "    ERROR: target/sdk failed to build.";   exit 1;)

      target/imagebuilder/prereq:
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/imagebuilder/prereq" $(SUBMAKE) -r -C target/imagebuilder BUILD_SUBDIR="target/imagebuilder" BUILD_VARIANT="" prereq  ||        (    printf "%s\n" "    ERROR: target/imagebuilder failed to build.";   exit 1;)

      target/imagebuilder/install: target/linux/install
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/imagebuilder/install" $(SUBMAKE) -r -C target/imagebuilder BUILD_SUBDIR="target/imagebuilder" BUILD_VARIANT="" install  ||      (    printf "%s\n" "    ERROR: target/imagebuilder failed to build.";   exit 1;)

      target/toolchain/prereq:
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/toolchain/prereq" $(SUBMAKE) -r -C target/toolchain BUILD_SUBDIR="target/toolchain" BUILD_VARIANT="" prereq  ||         (    printf "%s\n" "    ERROR: target/toolchain failed to build.";   exit 1;)

      target/toolchain/install:
             @+  /home/minfeng/openwrt/scripts/time.pl "time: target/toolchain/install" $(SUBMAKE) -r -C target/toolchain BUILD_SUBDIR="target/toolchain" BUILD_VARIANT="" install  ||       (    printf "%s\n" "    ERROR: target/toolchain failed to build.";   exit 1;)

   target/prereq:  target/linux/prereq
   target/install:  target/linux/install


subdir function 主要產生子目錄下的各個目錄的規則，產生的規則還會根據是否是prereq而動態增減規則，上面印出來的是stage 1時的規則。
第一個foreach是用來指定每一個在target目錄下的每個子目錄，$($(1)/builddirs)拆解後變成$($(curdir)/builddirs)，而$(curdir)/builddirs:=linux sdk imagebuilder toolchain，裡面也確實有這些目錄
第二個foreach是用來產生每個目錄所需的Makefile rules的目標(比如: clean compile ...等)，在這裡有一個固定的目標$($(1)/subtargets)，拆解後對應到$(curdir)/subtargets:=install
  stage 1運行到中間切過去stage 2時運行prereq後要回到stage1，上面印的時間點就是stage1切過去stage2後所產生的規則!!!!(非常重要，因為這時間點看不到其他rules，比如compile)
  在進來時指令是$(PREP_MK) $(NO_TRACE_MAKE) -r -s prereq，此時Makefile提供的變數MAKECMDGOALS已經是prereq
  subdir.mk前面的幾行設定了變數:
  ifeq ($(MAKECMDGOALS),prereq)
    SUBTARGETS:=prereq
    PREREQ_ONLY:=1
  else
    SUBTARGETS:=$(DEFAULT_SUBDIR_TARGETS)
  endif
  所以上面拆解四只出現每個目錄(linux sdk imagebuilder toolchain)的prereq和install
  如果不是prereq的話，SUBTARGETS就會是不一樣的值了，$(DEFAULT_SUBDIR_TARGETS)一開始的初始值在rules.mk
  DEFAULT_SUBDIR_TARGETS:=clean download prepare compile update refresh prereq dist distcheck configure check check-depends原本有這麼多要創建
第三個foreach是buildtype，因為這個target目錄沒有，所以就跳過了，不然好像也會產生規則
第四個foreach是要產生每個規則下面的shell命令，主要是log_make function
第五個foreach，$(foreach target,$(SUBTARGETS) $($(1)/subtargets),$(call subtarget,$(1),$(target)))，
是在說如果沒有指定到這麼下面的目錄(target/linux target/sdk target/targetimagebuilder target/toolchain)，我只指定到target目錄
那預設到底要跑誰? 裡面的subtarget function的subtarget-default function，藉由是否有設定相關變數來決定(最下面說明)，這裡產生了
   target/prereq:  target/linux/prereq
   target/install:  target/linux/install

warn function在include/debug.mk裡面，沒特別設定就是沒有開debug，如果有開就只是印警告訊息$(warning XXX)，沒開就是空的
warn_level function在include/debug.mk裡面，就是產生規則的關鍵了，不管有沒有開debug都會把第四個參數$(4)保留下來
  例如:$(call warn_level,dir_path,debug_string,relation_string,all: dep_XXXXX)，但這樣其實運行下去什麼都看不到並且沒有被加入到Makefile的環境規則當中，就是根本沒用的一行
  要看的到要訊息列印$(info $(call warn_level,dir_path,debug_string,relation_string,all: dep_XXXXX))，
  要變成讓Makefile能使用的規則rule，就是要用到eval function，變成$(eval $(call warn_level,dir_path,debug_string,relation_string,all: dep_XXXXX))
  此時所拆解後的規則就是
    all: dep_XXXXX
  到這邊其實只有目標跟依賴關係，以上面拆解四來說只有
  target/linux/prereq:
  target/linux/install:
  target/sdk/prereq:
  ...
  target/toolchain/install:
  
log_make function位在include/subdir.mk，這裡居然不用define，奇怪了。
# 1: subdir
# 2: target
# 3: build type
# 4: build variant
log_make = \
         $(if $(call debug,$(1),v),,@)+ \
         $(if $(BUILD_LOG), \
                set -o pipefail; \
                mkdir -p $(BUILD_LOG_DIR)/$(1)$(if $(4),/$(4));) \
        $(SCRIPT_DIR)/time.pl "time: $(1)$(if $(4),/$(4))/$(if $(3),$(3)-)$(2)" \
        $$(SUBMAKE) $(subdir_make_opts) $(if $(3),$(3)-)$(2) \
                $(if $(BUILD_LOG),SILENT= 2>&1 | tee $(BUILD_LOG_DIR)/$(1)$(if $(4),/$(4))/$(if $(3),$(3)-)$(2).txt)
下面將以拆解四target/linux/prereq:所產生的shell動作來說明
  @+  /home/minfeng/openwrt/scripts/time.pl "time: target/linux/prereq" $(SUBMAKE) -r -C target/linux BUILD_SUBDIR="target/linux" BUILD_VARIANT="" prereq  ||     (    printf "%s\n" "    ERROR: target/linux failed to build.";   exit 1;)
log_make function一開始就切到下一行並加上<tab>(拆解後告知這是指令)，經過判斷後先先產生@+，
subdir_make_opts function產生-r -C target/linux BUILD_SUBDIR="target/linux" BUILD_VARIANT=""
log_make對target/linux/prereq:所產生的動作其實只有
  @+  /home/minfeng/openwrt/scripts/time.pl "time: target/linux/prereq" $(SUBMAKE) -r -C target/linux BUILD_SUBDIR="target/linux" BUILD_VARIANT="" prereq
後面的'|| .....'是subdir function所產生

------------------------------------------------------------------

要收尾了~~~
openwrt下面有一個target目錄，該目錄下面還有四個獨立的目錄
openwrt----target----imagebuilder
                  |--linux
                  |--sdk
                  |--toolchain
最上層的openwrt(第一層)下面可以有多個子目錄(第二層)，target目錄是其中一個，每個openwrt下的子目錄(第二層)都會有自己的Makefile，來決定要如何編譯，
而該子目錄(第二層)底下又有多個子目錄(第三層)，
通常最上層的Makefile要能控制第二層、第三層或更多層的控制(就是要有每一個的規則)
直接控制第一層的編譯，就是直接下make 和所要的目標
直接控制第二層的編譯，這裡選用的是include第二層的Makefile，所以不需要用-C只要選用所提供的規則即可。這裡又針對所要編譯的目錄和目標做連結(可減少混亂的情況)
並且預設該有的目標已被寫在rules.mk的變數DEFAULT_SUBDIR_TARGETS:= clean download prepare compile update refresh prereq dist distcheck configure check check-depends
  make (第二層的路徑)/(所想要的目標) 
直接控制第三層的編譯，所產生的規則就是多一個路徑而已
  make (第二層路徑)/(第三層路徑)/(所想要的目標)

在第二層target的Makefile裡面
$(curdir)/subtargets:=install                        ，指定了不管你用什麼目標，一定會產生install這個目標規則。如上面拆解四，隨然目標是prereq但還是伴隨install
$(curdir)/builddirs:=linux sdk imagebuilder toolchain，說明第三層有哪些目錄要編譯，之後要產生可直接控制第三層的規則
$(curdir)/builddirs-default:=linux                   ，這是說要產生直接控制第二層規則時，預設會依賴那些第三層的規則呢?
                                                       例: target/prereq:  target/linux/prereq
                                                           因為這裡上面的例子是stage1的prereq，所以只有這行，可以想像stage2應該要有
                                                           target/clean:     target/linux/clean
                                                           target/download:  target/linux/download
                                                           target/prepare:   target/linux/prepare
                                                           ....
                                                           target/check-depends:   target/linux/check-depends
$(curdir)/builddirs-install:=linux $(if $(CONFIG_SDK),sdk) $(if $(CONFIG_IB),imagebuilder) $(if $(CONFIG_MAKE_TOOLCHAIN),toolchain)，
要直接控制第二層的規則所產生的依賴第三層的規則，除了預設之外也可以指定要依賴第三層的那些目錄，
例:target/install:  target/linux/install
   這例子剛好看不出來，因為上面的CONFIG值通通沒有選，如果都有選就會變成
   target/install:  target/linux/install target/sdk/install target/imagebuilder/install target/toolchain/install

另外一個package/Makefile前面也就看得懂了

